version: 2.1
executors:
  main:
    docker:
      - image: rust:1.56.1-bullseye
  postgres-alongside:
    docker:
      - image: rust:1.56.1-bullseye
      - image: cimg/postgres:14.0
        environment:
          POSTGRES_USER: postgres
          POSTGRES_HOST_AUTH_METHOD: trust

jobs:
  build:
    # environment:
    #   DATABASE_URL: postgres://postgres@localhost/circle_test

    executor: main
    steps:
      - checkout
      - restore_cache:
          keys:
            # Note, we shouldn't need to invalidate the cache, cargo will handle that itself
            # this does create the problem of the cache constantly growing, but its probably fine
            # if we update the key on each new rust version
            - cargo-3-rust.1.56
      # - run:
      #     name: Install sqlx-cli
      #     command: cargo install sqlx-cli
      # - run:
      #     name: Create database
      #     command: cargo sqlx database create
      # - run:
      #     name: Apply db migrations
      #     command: cargo sqlx migrate --source components/stores/migrations run
      - run:
          name: Add rustfmt
          command: rustup component add rustfmt
      - run:
          name: Build
          command: cargo build --release
      - save_cache:
          key: cargo-3-rust.1.56
          paths:
            - target/release/build
            - target/release/deps
            - target/release/incremental
            - target/release/gn_out
            - target/release/.fingerprint
            - target/release/.cargo-lock
  build-docker-images:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build base Docker image
          command: |
            docker build --cache-from=app -t botloader-base .
      - run:
          name: Build bot
          command: |
            docker build --cache-from=app -t jonas747/botloader-bot -f cmd/bot/Dockerfile .
      - run:
          name: Build webapi
          command: |
            docker build --cache-from=app -t jonas747/botloader-webapi -f cmd/webapi/Dockerfile .
      - run:
          name: Archive images
          command: |
            docker save -o image-bot.tar jonas747/botloader-bot
            docker save -o image-webapi.tar jonas747/botloader-webapi
      - persist_to_workspace:
          root: .
          paths:
            - ./image-webapi.tar
            - ./image-bot.tar
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
  publish-images:
    docker:
      - image: cimg/base:2021.04
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived images
          command: |
            docker load -i /tmp/workspace/image-webapi.tar
            docker load -i /tmp/workspace/image-bot.tar
      - run:
          name: Docker login
          command: |
            echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            docker push jonas747/botloader-webapi:latest
            docker push jonas747/botloader-bot:latest
workflows:
  build:
    jobs:
      - build-docker-images
      - publish-images:
          requires:
            - build-docker-images
